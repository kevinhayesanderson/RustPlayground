Rust:
  - An Associated function is a function that's implemented on a type.
  - Enumeration, often called an enum, which is a type that can be in one of multiple states:
      - Each possible state is called a variant.
  - Ensuring Reproducible Builds with the Cargo.lock File:
      - it’s often checked into source control with the rest of the code in your project.
  - Shadowing lets us reuse the variable name rather than forcing us to create two unique variables:
  - On Windows, pressing enter results in a carriage return and a newline, \r\n:
      - The trim method eliminates \n or \r\n
Datatypes:
  two data type subsets:
    - scalar
    - compound
  Rust is a statically typed language:
    - which means that it must know the types of all variables at compile time
Scalar Types:
  A scalar type represents a single value:
  Rust has four primary scalar types:
    - integers:
        - Rust’s defaults are generally good places to start: integer types default to i32.
        - The primary situation in which you'd use isize or usize is when indexing some sort of collection.
        - https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-overflow
    - floating-point numbers:
        - Rust’s floating-point types are f32 and f64
        - The binary format of a 32-bit single-precision float variable is s-eeeeeeee-fffffffffffffffffffffff, where s=sign, e=exponent, and f=fractional part (mantissa).
          - A single-precision float only has about 7 decimal digits of precision (actually the log base 10 of 223, or about 6.92 digits of precision).
          - The greater the integer part is, the less space is left for floating part precision.
        - https://www.geeksforgeeks.org/difference-between-single-precision-and-double-precision/
    - Booleans
    - characters:
        - Rust’s char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.
          - Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust.
          - Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive.
Compound types:
  - Compound types can group multiple values into one type.
  - Rust has two primitive compound types:
      - tuples:
          - The tuple without any values has a special name, unit.
          - This value and its corresponding type are both written () and represent an empty value or an empty return type.
          - Expressions implicitly return the unit value if they don’t return any other value.
      - arrays:
Functions:
  Rust code uses snake case as the conventional style for function and variable names, in which all letters are lowercase and underscores separate words:
    - parameter and argument interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function.
  Statements are instructions that perform some action and do not return a value:
  Expressions evaluate to a resultant value. Let’s look at some examples:
    - Calling a function is an expression.
    - Calling a macro is an expression.
    - A new scope block created with curly brackets is an expression.
    - Expressions do not include ending semicolons.
      - If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value.
Control Flow:
  - if expressions
  - Rust has three kinds of loops:
      - loop:
          - The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.
          - Loop Labels to Disambiguate Between Multiple loops:
              - You can optionally specify a loop label on a loop that you can then use with break or continue to specify that those keywords apply to the labeled loop instead of the innermost loop.
              - Loop labels must begin with a single quote.
      - while:
      - for
